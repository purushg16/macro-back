//Import express.js module and create its variable.
const express=require('express');
const path = require('path');
const bodyParser = require('body-parser');
const cors = require('cors');
const multer = require('multer');
const uuid= require('uuid');
const fs = require('fs');
const { exec } = require('child_process');

const app = express();
app.use(cors());
app.use(express.json());
app.use(bodyParser.urlencoded({extended:true}));

// const storage = multer.memoryStorage();
// const upload = multer({ dest: './public/data/uploads/' });

const storage =
    multer.diskStorage({
    destination: path.join(__dirname, 'pdfs/raw/'), // destination folder
    filename: (req, file, cb) => {
        cb(null, uuid.v4() + path.extname(file.originalname));
    }
});

const upload =
    multer({
        storage,
        dest: path.join(__dirname, 'pdfs/raw/'), // destination folder
        limits: {fileSize: 3500000}, // size we will acept, not bigger
        fileFilter: (req, file, cb) => {
            const filetypes = /pdf/; // filetypes you will accept
            const mimetype = filetypes.test(file.mimetype); // verify file is == filetypes you will accept
            const extname = filetypes.test(path.extname(file.originalname)); // extract the file extension
            // if mimetype && extname are true, then no error
            if(mimetype && extname){
                return cb(null, true);
            }
            // if mimetype or extname false, give an error of compatibilty
            return cb("The uploaded file, isn't compatible :( we're sorry");
        }
    })

const pythonMain = 'python/main.py';
const pythonException = 'python/exception.py';
let result = [];

//Import PythonShell module.
const {PythonShell} = require('python-shell');

app.post('/upload', upload.single('pdfFile'), (req, res) => {
    // console.log(req.body.bank);
    // console.log(req.file);
    const bank = req.body.bank;
    const password = req.body.password;

    const pdfFilePath = `pdfs/raw/${req.file.filename}`;
    const unlockedPdfPath = `pdfs/unlocked_${req.file.filename}`;
    const pdfPassword = '183522399';
    const qpdfCommand = `qpdf --password=${pdfPassword} --decrypt ${pdfFilePath} ${unlockedPdfPath}`;

    exec(qpdfCommand, (error) => {
        if (error) {
          console.error('Error unlocking PDF:', error);
          res.status(500).send('Error unlocking PDF.');
          return;
        }

        const unlockedPdfBuffer = fs.readFileSync(unlockedPdfPath);
        console.log(unlockedPdfBuffer);

        fs.unlinkSync('temp.pdf');
        fs.unlinkSync('unlocked.pdf');
    });

	//Here are the option object in which arguments can be passed for the python_test.js.
	// let options = {
	// 	mode: 'text',
	// 	pythonOptions: ['-u'], // get print results in real-time
	// 	args: [ req.file.path ] //An argument which can be accessed in the script using sys.argv[1]
	// };
	
	// // Create a PythonShell instance
    // const pythonShell = (bank !== 'HDFC') ? new PythonShell(pythonMain, options) : new PythonShell(pythonException, options) ;

    // // Handle the output from the Python script
    // pythonShell.on('message', (message) => {
    //     const parsedOutput = JSON.parse(message);
    //     result = parsedOutput
    // });

    // // Handle errors (if any)
    // pythonShell.on('error', (err) => {
    // console.error('Python script error:', err);
    // });

    // // End the PythonShell instance
    // pythonShell.end((err) => {
    // if (err) {
    //     console.error('Python shell process ended with error:', err);
    // } else {
    //     console.log('Python shell process finished.');

    //     console.log(result);
    //     // result.forEach(element => {
    //     //     console.log(element['Particulars']);
    //     // });

    // }
    // });
});


//Creates the server on default port 8000 and can be accessed through localhost:8000
const port=8000;
app.listen(port, ()=>console.log(`Server connected to ${port}`));
